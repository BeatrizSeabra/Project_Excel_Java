/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package csheets.ext.macrotomenuitem.ui;

import csheets.CleanSheets;
import csheets.core.formula.compiler.FormulaCompilationException;
import csheets.ext.edMenu.ui.EdMenuUIExtension;
import csheets.ext.editMacro.compiler.Macro;
import csheets.ext.macrotomenuitem.MacroToMenuItem;
import csheets.ui.ctrl.UIController;
import csheets.ui.ext.UIExtension;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;


/**
 * Class that represent the window to present to the user of the cleansheets
 * application, for associate macros with the menu items option. On thar window,
 * you can also set up the macro runs before the menu option (before), it is
 * executed instead of the menu option (around), or if it is executed after the
 * menu option (after).
 * @author 1090675 - Tiago Pereira
 */
public class WindowMacroToMenuItem extends javax.swing.JFrame {

    /**
     * ArrayList<Macro> arrayMacros, represent all macros created on the application
     * to display to the user, the macro that pretend to associate to menu item.
     * ArrayList<JMenuItem> arrayMenuItem, represent all menu item of the application
     * to display to the user, the menu item that he wants to associate with the macro.
     * CleanSheets app = new CleanSheets(), a instance of Cleansheets to use information
     * present on it, is usual to use as parameter on the uiController instance.
     * UIController uiController, represent an instance of the UIController of the
     * user interface controller of the cleansheets application, itÂ´s important
     * to access to every information relative to the user interface.
     * MacroToMenuItem macroToMenuItem, represent an instance of the MacroToMenuItem
     * that will save the information about the association between the macro that
     * will be execute on the menu item selection.
     */
    private ArrayList<Macro> arrayMacros = new ArrayList<>();
    private final ArrayList<JMenuItem> arrayMenuItem = new ArrayList<>();
    private final CleanSheets app = new CleanSheets();
    private UIController uiController = new UIController(app);
    private MacroToMenuItem macroToMenuItem;

    /**
     * Creates new form WindowMacroToMenu
     * @param uic
     */
    public WindowMacroToMenuItem(UIController uic) {
        uiController = uic;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        CbMacroRun = new javax.swing.JComboBox();
        CbExtensionMenuItem = new javax.swing.JComboBox();
        btnOK = new javax.swing.JButton();
        CbMenuItem = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Extend Menus with Macros");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jLabel1.setText("Select Macro to run:");

        jLabel2.setText("Select Extension:");

        jLabel3.setText("Specify Menu to run Macro:");

        CbExtensionMenuItem.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Before Menu Action", "Around Menu Action", "After Menu Action" }));
        CbExtensionMenuItem.setSelectedIndex(-1);

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(CbMacroRun, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CbExtensionMenuItem, 0, 201, Short.MAX_VALUE)
                    .addComponent(CbMenuItem, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(CbMacroRun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(CbMenuItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(CbExtensionMenuItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(btnOK)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * ActionPerformed relative to button, named btnOK, receve the information
     * selected on the combox box's of the application and associate with the
     * menu item that will provide the execution of the specified macro on the
     * combox box named CbMacroRun.
     * @param evt 
     */
    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
       try {
           if (CbMacroRun.getSelectedIndex() != -1 && CbMenuItem.getSelectedIndex() != -1 &&
               CbExtensionMenuItem.getSelectedIndex() != -1)
       {
           String macroName2 = (String)CbMacroRun.getSelectedItem();
           for (Macro macro : arrayMacros) {
               if (macroName2.equalsIgnoreCase(macro.getName()))
               {
                   //Macro m = macro;
                   macroToMenuItem = new MacroToMenuItem(macro);                   
               }
           }
           String menuItemName = (String)CbMenuItem.getSelectedItem();
           for (JMenuItem obj : arrayMenuItem) {
               if (menuItemName.equalsIgnoreCase(obj.getText()))
               {
                   //Macro m = macro;
                   macroToMenuItem.setMenuItem(obj);
                   //macroToMenuItem = new MacroToMenuItem(macro);                   
               }
           }
           macroToMenuItem.setExtendMenuItem((String)CbExtensionMenuItem.getSelectedItem());
           //final Macro m = (Macro)CbMacroRun.getSelectedItem();
           String nameMacro="";
           //try {
               nameMacro = macroToMenuItem.getMacro().getName();
           
           
           /////JMenuItem mi = (JMenuItem)CbMenuItem.getSelectedItem();
           /////String str = (String)CbExtensionMenuItem.getSelectedItem();
           //try {
               //JOptionPane.showMessageDialog(null, m.getName());
           //} catch (FormulaCompilationException ex) {
           //    Logger.getLogger(WindowMacroToMenuItem.class.getName()).log(Level.SEVERE, null, ex);
           //}
           //JOptionPane.showMessageDialog(null, mi.getText());
           //JOptionPane.showMessageDialog(null, str);
           //macroToMenuItem = new MacroToMenuItem(m,mi,str);
           UIExtension listExtension[] = uiController.getExtensions();
           for (UIExtension uiExtension : listExtension)
           {
               if (uiExtension instanceof UIExtensionMacroToMenuItem) 
               {
                   JMenuItem itemMenu = new JMenuItem("Run Macro: "+nameMacro);
                   itemMenu.setEnabled(true);
                   ActionListener actionListener = new ActionListener() 
                   {
                       @Override
                       public void actionPerformed(ActionEvent e) 
                       {                           
                           try 
                           {
                               macroToMenuItem.getMacro().compiler();
                               macroToMenuItem.getMacro().results();
                               //uiController.getActiveSpreadsheet().getCell(0, 0).setContent("1");
                           } catch (Exception ex) {
                               JOptionPane.showMessageDialog(null, ex.getMessage());
                           }
                       }
                   };
                   itemMenu.addActionListener(actionListener);
                   uiExtension.getMenu().add(itemMenu);                    
               }
           }
           JOptionPane.showMessageDialog(null, "Macro associated with menu successfully!",
                   "Macro Associated",JOptionPane.INFORMATION_MESSAGE);
           dispose();
       }    
       else
       {
           JOptionPane.showMessageDialog(null, "You must selection all fields to create the macro "
                   + "associate with menu!","Empty Selection Field",JOptionPane.INFORMATION_MESSAGE);
       }
        } catch (FormulaCompilationException ex) {
               Logger.getLogger(WindowMacroToMenuItem.class.getName()).log(Level.SEVERE, null, ex);
           }
    }//GEN-LAST:event_btnOKActionPerformed
    
    /**
     * Recursive method that find for JMenuItem components in the JMenuBar of the
     * window of application, to show to user, the menu itens that the user will 
     * bind to the macro that will be executed on menu item event of cleansheets.
     * @param obj 
     */    
    public void getMenuItemsOfApplication(Object obj) 
    {
        if (obj instanceof JMenuBar) 
        {
            for (Component c : ((JMenuBar) obj).getComponents()) {
                getMenuItemsOfApplication(c);   
            }   
        }   
        if (obj instanceof JMenu) {   

            for (Component c : ((JMenu) obj).getMenuComponents()) {   
                getMenuItemsOfApplication(c);   
            }   
        }   
        if (obj instanceof JMenuItem) {
            if (obj instanceof JMenu)
            {
                // if is a JMenu donÂ´t want to add to the arrayList
            } else {
                arrayMenuItem.add((JMenuItem) obj);
            }
        }      
   } 

    /**
     * Provide the action of the activated of the frame of this option, 
     * @param evt 
     */
    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        try 
        {            
            arrayMacros = uiController.getActiveWorkbook().getMacros();
            csheets.ui.Frame frame = new csheets.ui.Frame(app);
            for (Macro macro : arrayMacros) {
                try {
                    CbMacroRun.addItem(macro.getName());
                } catch (FormulaCompilationException ex) {
                    Logger.getLogger(WindowMacroToMenuItem.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            getMenuItemsOfApplication(frame.getJMenuBar());
            for (JMenuItem jMenuItem : arrayMenuItem) {
                CbMenuItem.addItem(jMenuItem.getText());
            }
            CbMacroRun.setSelectedIndex(-1);
            CbMenuItem.setSelectedIndex(-1);
        } 
        catch (NullPointerException exception)
        {
            JOptionPane.showMessageDialog(null, "There are no macros created on the application!"
                    + "\nYou must create macros to run and associate with menu option."
                    ,"No Macros Created",JOptionPane.INFORMATION_MESSAGE);
            dispose();
        }
//        catch (FormulaCompilationException ex) {
//            Logger.getLogger(WindowMacroToMenuItem.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_formWindowActivated

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WindowMacroToMenuItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WindowMacroToMenuItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WindowMacroToMenuItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WindowMacroToMenuItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WindowMacroToMenuItem(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox CbExtensionMenuItem;
    private javax.swing.JComboBox CbMacroRun;
    private javax.swing.JComboBox CbMenuItem;
    private javax.swing.JButton btnOK;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
